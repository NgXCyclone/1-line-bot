const express = require('express'); const app = express(); const port = 3000; app.get('/', (req, res) => res.send('Bot Is Ready')); app.listen(port, () => console.log(`Example app listening at http://localhost:${port}`)); const discord = require("discord.js"); const moment = require('moment'); const client = new discord.Client(); const {database} = require("./database"); database(); const economy = require("./databases/onelineeco"); const config = require("./config.json"); let prefix = "1line"; client.on('message', async message => { const args = message.content.slice(prefix.length).trim().split(/ +/g); /*--------- BASIC COMMANDS -----------*/if(message.content.toLowerCase().startsWith(prefix + "help")) return message.channel.send({embed: {description: `**__Commands__\n\n1lineavatar\n\n1lineping\n\n1lineuserinfo\n\n1lineserverinfo\n\n1linebotinfo\n\n1lineinvite**`}}); if(message.content.toLowerCase().startsWith(prefix + "avatar")) return message.channel.send({embed: {image: {url: message.author.displayAvatarURL({format: 'png', dynamic: true, size: 1024})}}}); if(message.content.toLowerCase().startsWith(prefix + "ping")) return message.channel.send("Ping! " + client.ws.ping + "ms"); if(message.content.toLowerCase().startsWith(prefix + "userinfo")) {const member = message.mentions.members.first() || message.guild.members.cache.get(args[0]) || message.member; let status = member.presence.status; return message.channel.send({embed: { color: member.roles.highest.hexColor, description: `**Username:** ${member.user.tag}\n**ID:** ${member.user.id}\n**Nickname:** ${member.nickname !== null ? ` ${member.nickname}` : "None"}\n**Status:** ` + /*"Being Fixed"*/status + `\n**Playing:** ${member.user.presence.game ? `ðŸŽ® ${member.user.presence.game.name}` : "Playing Nothing"}\n**Roles:** ${member.roles.cache.filter(r => r.id !== message.guild.id).map(roles => `\`${roles.name}\``).join(" **|** ") || "No Roles"}\n**Highest Role:** ${member.roles.highest}\n**Joined Discord At:** ${moment(member.user.createdTimestamp).format('dddd, MMMM Do YYYY')}, ${moment(member.user.createdTimestamp).fromNow()}\n**Joined Server At:** ${moment.utc(member.joinedAt).format('dddd, MMMM Do YYYY, HH:mm:ss')}` }})}; if(message.content.toLowerCase().startsWith(prefix + "serverinfo")) {let online = message.guild.members.cache.filter(member => member.user.presence.status !== 'offline'); let day = message.guild.createdAt.getDate(); let month = 1 + message.guild.createdAt.getMonth(); let year = message.guild.createdAt.getFullYear(); return message.channel.send({embed: { description: `**Server Name:** ${message.guild.name}\n**Server ID:** ${message.guild.id}\n**Server Owner:** ${await message.guild.members.fetch(message.guild.ownerID).then(m =>(m.user.tag))}\n**Region:** ${message.guild.region}\n**Channels:** ${message.guild.channels.cache.size}\n**Members:** ${message.guild.memberCount}\n **Roles:** ${message.guild.roles.cache.size}\n**Boost Count:** ${message.guild.premiumSubscriptionCount || '0'}\n**Boost Tier:** ${message.guild.premiumTier ? `Tier ${message.guild.premiumTier}` : 'None'}\n**Verification Level:** ${message.guild.verificationLevel} `}})}; if(message.content.toLowerCase().startsWith(prefix + "botinfo")) return message.channel.send({embed: {thumbnail: {url: client.user.displayAvatarURL()}, description: `**Bot Name:** ${client.user.tag}\n**Bot Owner:** ${client.users.cache.get("306557645479870464").tag}\n**Servers:** ${client.guilds.cache.size}\n**Created On:** ${moment(client.user.createdTimestamp).format('dddd, MMMM Do YYYY')}, ${moment(client.user.createdTimestamp).fromNow()}`}}); if(message.content.toLowerCase().startsWith(prefix + "invite")) return message.channel.send(`<https://discord.com/api/oauth2/authorize?client_id=801775553689419807&permissions=117760&scope=bot>`); /*--------- ECONOMY COMMANDS -----------*/ if(message.content.toLowerCase().startsWith(prefix + "start")) {let startBal = await economy.findOne({guildID: message.guild.id}); if(!startBal) {let newStart = new economy({guildID: message.guild.id, guildName: message.guild.name, userID: message.author.id, hand: 0, bank: 0, total: 0}); message.channel.send("Bank account has been created!"); await newStart.save(); } else {return message.channel.send("You already have setup a bank account")} }; }); client.login(process.env.secret)
